Eric Chen
305099495
CS35L Lab Section 1

1)
I first get the Diffutils reposity in Git format and go into
The folder.

Commands:
	git clone https://git.savannah.gnu.org/git/diffutils.git
	cd diffutils

2)
Then I want to get the log of changes to Diffutils
saved to a file.

Command:
git log > git-log.txt

3)
Then I want to generate a list of tags used for Diffutils
saved to a file.

Command:
git tag > git-tags.txt

4)
Then I try to find the commit entitled
 “maint: quote 'like this' or "like this", not `like this'”,
by using emacs search C-s with the keyword maint and look through
until I found it.

The commit is 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f

Now I put the patch contents into a file.

Commands: 
	git show 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote-patch.txt

5)
Then I go check out the version 3.0 of Diffutils.
Commands:
 	git checkout v3.0 

6)
Next I apply quote-patch.txt to v3.0

Commands:
	patch -p1 < quote-patch.txt

I ran into some issues with patching

patching file README
Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.

patching file README-hacking
Hunk #1 FAILED at 19.

patching file cfg.mk
Hunk #1 FAILED at 29.

patching file src/diff.c
Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.

patching file src/diff3.c
Hunk #6 FAILED at 433.

7)
Then I get the status to see what happened

Commands:
	git status

The output I get is 

# HEAD detached at v3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   NEWS
#	modified:   README
#	modified:   TODO
#	modified:   doc/diagmeet.note
#	modified:   ms/config.bat
#	modified:   ms/config.site
#	modified:   po/en.po
#	modified:   src/analyze.c
#	modified:   src/cmp.c
#	modified:   src/context.c
#	modified:   src/diff.c
#	modified:   src/diff.h
#	modified:   src/diff3.c
#	modified:   src/dir.c
#	modified:   src/ifdef.c
#	modified:   src/io.c
#	modified:   src/sdiff.c
#	modified:   src/side.c
#	modified:   src/system.h
#	modified:   src/util.c
#	modified:   tests/help-version
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	NEWS.orig
#	README-hacking.orig
#	README-hacking.rej
#	README.orig
#	README.rej
#	cfg.mk.orig
#	cfg.mk.rej
#	git-log.txt
#	git-tags.txt
#	ms/config.site.orig
#	quote-patch.txt
#	src/cmp.c.orig
#	src/context.c.orig
#	src/diff.c.orig
#	src/diff.c.rej
#	src/diff.h.orig
#	src/diff3.c.orig
#	src/diff3.c.rej
#	src/dir.c.orig
#	src/sdiff.c.orig
#	src/system.h.orig
#	src/util.c.orig
#	tests/help-version.orig

8 & 9)

The next step is to learn how to use vc-diff, vc-revert, and diff-apply-hunk.
Then I need to UNDO all changes to files other than .c files using vc-diff
And vc-revert. That corresponds to the files NEWS, README, TODO,  doc/diagmeet.note, ms/config.bat,ms/config.site, po/en.po tests/help-version, src/system.h, src/diff.h.

I call the following on each file
To revert all the changes.

Commands:
	C-x v =
	C-x v u


Second, for .c files, I need to undo all changes which are basically on comments.
I go into all .c files and apply the diff-apply-hunk to undo the 
Changes but since they're all in src I'll cd there first.

I call the following on each file
Commands:
	C-x v =
	C-u C-c C-a ( Reverting every necessary hunk)

10)

Now I use emacs to examine the files src/*.c.rej
(diff3.c.rej and diff.c.rej) and copy rejected
Patches into corresponding .c files as needed.
Since patch couldn't find the correct place to make the 
Change, the patch created a reject file showing changes
That it could not make. So I need to manually go
Into the corresponding .c files diff3.c and diff.c
To replace the grave accent with a "'”.

11)
Afterwards, I remove the untracked files that git status warned 
Me about, but make sure I go out of the src folder.

Command:
       git clean -f

12) Then I check to make sure I have half-dozen modified files.

# HEAD detached at v3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   src/cmp.c
#	modified:   src/diff.c
#	modified:   src/diff3.c
#	modified:   src/dir.c
#	modified:   src/sdiff.c
#	modified:   src/util.c
#
no changes added to commit (use "git add" and/or "git commit -a")


Then I put the patch into a file quote-3.0-patch.txt.
And make sure the file is of said length, and is 300-400 lines long.

Commands:
	git status 
	git diff > quote-3.0-patch.txt
	wc -l quote-3.0-patch.txt

13) 

After reading the READ-ME hacking, I decide to build on lnxsrv02

Commands:
 	./bootstrap
	./configure
	make
	make check

Now I need to verify that Diffutils does the right thing.
I call the newly created executable
 ./diff . - and ./diff --help and the grave accent now gets
Fixed to what we expected.

An example with diff . -

[jeung@lnxsrv09 ~/lab9/gitroot/diffutils/src]$ ./diff . -
diff: cannot compare '-' to a directory


14) Now I need to do a sanity test using modified version I just built
To compare to the source code of Diffutils 3.0

I make two directories
Commands:
	mkdir diffutils-3.0-patch
	mkdir diffutils-3.0

Then I want to copy the original source code

Commands:
	git clone ~eggert/src/gnu/diffutils diffutils-orig

Grab the initial diff from the original source code and move it
To diffutils-3.0 and also need to get the patched version
Into diffutils-3.0-patch

Commands:
	cp -r src ../diffutils-3.0


Now Im using my patched diff to diff the two directories
To compare the changes of non-patched and patched fed into a file

Commands:
	./diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt


15) Now I want to compare the 2 patches

Commands:
	diff -u quote-3.0-test.txt quote-3.0-patch.txt > differences.txt

There are many differences and clearly not identical. However,
The differences are definitely innocuous. Most of the differences
Are the apostrophe " ' " used instead of the grave accent and
Some of the names to files are different but fine.
